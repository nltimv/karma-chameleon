# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

executors:
  linter:
    docker:
      - image: python:3.11
  go-builder:
    docker:
      - image: cimg/go:1.22.1
  docker-builder:
    environment:
      IMAGE_NAME: ghcr.io/nltimv/karma-chameleon
      GHCR_USERNAME: nltimv
    docker:
      - image: docker:20
    resource_class: small
  helm-builder:
    environment:
      CHART_PREFIX: ghcr.io/nltimv/helm
      CHART_PATH: ./charts/karma-chameleon
      CHART_NAME: karma-chameleon
      GHCR_USERNAME: nltimv
    docker:
      - image: cimg/deploy:2023.09

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  lint:
    executor: linter
    steps:
      - checkout
      - run:
          name: Install requirements
          command: |
            python -m pip install --upgrade pip
            python -m pip install pre-commit
      - run:
          name: Pre-commit - Analyze code
          command: |
            python -m pre_commit run -v --all-files
  build-test-slack:
    executor: go-builder
    working_directory: ~/project/slack
    steps:
      - checkout:
          path: "~/project"
      - run:
          name: Build slack using Go
          command: make build
      - run:
          name: Run tests using Go
          command: make test
      - store_test_results:
          path: results.xml
      - run:
          name: Run test coverage analysis using Go
          command: make cover
      - store_artifacts:
          path: cover_results
      
  build-slack-docker-main:
    executor: docker-builder
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build application Docker image
          command: |
            docker build -t build:latest .
      - run:
          name: Publish Docker Image to GitHub Container Registry
          command: |
            export REVISION=$(echo "<< pipeline.git.revision >>" | awk '{print substr($0,0,7)}')
            export VERSION="0.0.0.<< pipeline.number >>-dev-$REVISION"
            echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
            docker tag build:latest $IMAGE_NAME:canary
            docker push $IMAGE_NAME:canary
            docker tag $IMAGE_NAME:canary $IMAGE_NAME:$VERSION
            docker push $IMAGE_NAME:$VERSION
  build-slack-docker-release:
    executor: docker-builder
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build application Docker image
          command: |
            docker build -t build:latest .
      - run:
          name: Publish Docker Image to GitHub Container Registry
          command: |
            export NUMBER=$(echo "<< pipeline.git.tag >>" | sed 's/v//')
            export VERSION="$NUMBER.0.<< pipeline.number >>"
            echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
            docker tag build:latest $IMAGE_NAME:latest
            docker push $IMAGE_NAME:latest
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$VERSION
            docker push $IMAGE_NAME:$VERSION
  publish-helm-main:
    executor: helm-builder
    steps:
      - checkout
      - run:
          name: Set version numbers in Helm
          command: |
            export REVISION=$(echo "<< pipeline.git.revision >>" | awk '{print substr($0,0,7)}')
            export CHART_VERSION="0.0.<< pipeline.number >>"
            export APP_VERSION="0.0.0.<< pipeline.number >>-dev-$REVISION"
            sed -i -e "s/^version: .*$/version: $CHART_VERSION/" -e "s/^appVersion: .*$/appVersion: \"$APP_VERSION\"/" -e "s/^name: $CHART_NAME/name: $CHART_NAME-dev/" "$CHART_PATH/Chart.yaml"
      - run:
          name: Package Helm chart
          command: helm package $CHART_PATH
      - run:
          name: Push Helm chart
          command: |
            export REVISION=$(echo "<< pipeline.git.revision >>" | awk '{print substr($0,0,7)}')
            export CHART_VERSION="0.0.<< pipeline.number >>"
            echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
            helm push "$CHART_NAME-dev-$CHART_VERSION.tgz" "oci://$CHART_PREFIX"
  publish-helm-release:
    executor: helm-builder
    steps:
      - checkout
      - run:
          name: Set version numbers in Helm
          command: |
            export NUMBER=$(echo "<< pipeline.git.tag >>" | sed 's/v//')
            export CHART_VERSION="$NUMBER.<< pipeline.number >>"
            export APP_VERSION="$NUMBER.0.<< pipeline.number >>"
            sed -i -e "s/^version: .*$/version: $CHART_VERSION/" -e "s/^appVersion: .*$/appVersion: \"$APP_VERSION\"/" "$CHART_PATH/Chart.yaml"
      - run:
          name: Package Helm chart
          command: helm package $CHART_PATH
      - run:
          name: Push Helm chart
          command: |
            export NUMBER=$(echo "<< pipeline.git.tag >>" | sed 's/v//')
            export CHART_VERSION="$NUMBER.<< pipeline.number >>"
            echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
            helm push "$CHART_NAME-$CHART_VERSION.tgz" "oci://$CHART_PREFIX"

workflows:
  cicd-dev:
    jobs:
      - lint:
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/
      - build-test-slack:
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/
  cicd-main:
    jobs:
      - lint:
          filters:
            branches:
              only: main
            tags:
              ignore: /.*/
      - build-test-slack:
          filters:
            branches:
              only: main
            tags:
              ignore: /.*/
      - build-slack-docker-main:
          requires:
            - lint
            - build-test-slack
          filters:
            branches:
              only: main
            tags:
              ignore: /.*/
      - publish-helm-main:
          requires:
            - "build-slack-docker-main"
          filters:
            branches:
              only: main
            tags:
              ignore: /.*/
  release:
    jobs:
      - lint:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+$/
      - build-test-slack:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+$/
      - build-slack-docker-release:
          requires:
            - lint
            - build-test-slack
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+$/
      - publish-helm-release:
          requires:
            - "build-slack-docker-release"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+$/
